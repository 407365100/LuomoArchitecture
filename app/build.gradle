
apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.luomo.luomoarchitecture"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }
    //1.指定so库文件路径
    sourceSets.main.jniLibs.srcDirs = ['src/main/libs']
    //2.开启dataBinding支持
    dataBinding {
        enabled = true
    }
    //3.设置打包文件名称
    /*applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 智慧车队-versionName-versionCode-编译时间.apk
                def fileName = "E车队_code${defaultConfig.versionCode}_v${defaultConfig.versionName}_release_${releaseTime()}.apk"
                if (variant.buildType.isDebuggable()) {
                    fileName = "E车队_code${defaultConfig.versionCode}_v${defaultConfig.versionName}_debug_${releaseTime()}.apk"
                }
                //output.outputFile = new File(output.outputFile.parent, fileName)
                //as3.0以后，通过此方式设置，同时修改each为all
                outputFileName = fileName
            }
        }
    }*/
    //4.添加忽略lint报错，解决jenkins打包因为lint出问题
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            //日志打印
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //内存泄漏检查
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':commonres')
    implementation project(':commonsdk')
}
configurations.all {
    //解决"Conflict with dependency 'com.android.supportsupport-annotations' in project 'app'"
    resolutionStrategy.force 'com.android.support:support-annotations:26.1.0'
}
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}
